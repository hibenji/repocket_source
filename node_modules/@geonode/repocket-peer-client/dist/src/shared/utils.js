"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntimeInfo = exports.getDeviceInfo = exports.cyrb53 = void 0;
const global_1 = require("./global");
const os_1 = __importDefault(require("os"));
var network = require('network');
const cyrb53 = (str, seed = 0) => {
    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
    for (let i = 0, ch; i < str?.length; i++) {
        ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 =
        Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^
            Math.imul(h2 ^ (h2 >>> 13), 3266489909);
    h2 =
        Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^
            Math.imul(h1 ^ (h1 >>> 13), 3266489909);
    return ((h2 >>> 0).toString(16).padStart(8, '0') +
        (h1 >>> 0).toString(16).padStart(8, '0'));
};
exports.cyrb53 = cyrb53;
async function getDeviceInfo() {
    // const deviceInfo = DeviceInfoPlugin();
    const deviceName = () => {
        if (global_1.isDocker)
            return 'Docker Container';
        if (global_1.isMac)
            return 'Mac Desktop';
        if (global_1.isMacIntel)
            return 'Mac Intel Desktop';
        if (global_1.isWindows)
            return 'Windows Desktop';
        if (global_1.isLinux)
            return 'Linux Desktop';
        if (global_1.isLinuxArm)
            return 'Linux ARM Desktop';
        return 'Desktop';
    };
    const getConnectivityType = async () => new Promise((res) => {
        network.get_active_interface(function (err, obj) {
            if (err) {
                // Linux fails at this, so better to just keep it Wireless, not that important
                res('Wireless');
                return;
            }
            // obj.type is the network type
            // 'Wireless' for wifi
            // 'Wired' for ethernet
            res(obj.type);
        });
    });
    const getMacAddress = async () => new Promise((res, rej) => {
        console.log('process.platform :', process.platform);
        if (process.platform !== 'darwin' && process.platform !== 'win32') {
            network.get_interfaces_list(function (err, arr) {
                if (err || arr.length === 0) {
                    rej(err);
                    return;
                }
                res(arr[0].mac_address);
            });
        }
        else {
            network.get_active_interface(function (err, obj) {
                if (err) {
                    rej(err);
                    return;
                }
                res(obj.mac_address);
            });
        }
    });
    // const androidDeviceInfo = await deviceInfo.androidInfo;
    let connectivityResult = await getConnectivityType();
    console.log(connectivityResult);
    let macAddress = await getMacAddress();
    macAddress = (0, exports.cyrb53)(macAddress);
    if (global_1.isDocker) {
        macAddress = 'docker-' + macAddress;
    }
    console.log(macAddress);
    const version = global_1.appVersion;
    return {
        cpus: os_1.default.cpus().length,
        id: macAddress,
        device: os_1.default.type(),
        isPhysicalDevice: true,
        model: os_1.default.platform(),
        version: version,
        isDesktop: true,
        buildNumber: 0,
        connectivityType: connectivityResult,
        os: deviceName(),
        osVersion: os_1.default.release()
    };
}
exports.getDeviceInfo = getDeviceInfo;
function getRuntimeInfo() {
    let osName = 'unknown-os';
    if (global_1.isDocker) {
        osName = 'sdk-node';
    }
    else if (global_1.isMac) {
        osName = 'sdk-mac';
    }
    else if (global_1.isWindows) {
        osName = 'sdk-windows';
    }
    else if (global_1.isLinux) {
        osName = 'sdk-linux';
    }
    else {
        osName = 'sdk';
    }
    return {
        // libVersion: libVersion,
        isDocker: global_1.isDocker,
        isMac: global_1.isMac,
        isLinux: global_1.isLinux,
        isWindows: global_1.isWindows,
        osName: osName
    };
}
exports.getRuntimeInfo = getRuntimeInfo;
