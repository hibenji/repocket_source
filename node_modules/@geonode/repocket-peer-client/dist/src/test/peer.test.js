"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const services_1 = require("../services");
const peer_service_1 = __importDefault(require("../services/peer.service"));
function nodeLogIn(email, api_key) {
    return new Promise((resolve, reject) => {
        services_1.peerManagerApiService
            .post('peer/token', { email: email, api_key: api_key })
            .then((result) => {
            if (result.status === 200) {
                resolve({ peerApiToken: result.data.token, userId: result.data.user_id });
                // storage.set('p-api-token', result.data.token);
                // storage.set('userId', result.data.user_id);
            }
            else {
                switch (result.error?.code) {
                    case 'auth/user-not-found':
                        reject({ error: 'auth/user-not-found' });
                        return;
                    case 'auth/wrong-password':
                        reject({ error: 'auth/wrong-password' });
                        return;
                    default:
                        reject({ error: result.error?.code });
                        return;
                }
            }
        })
            .catch((e) => {
            reject({ error: e });
            return;
        });
    });
}
nodeLogIn('adirsimona@gmail.com', '53ecbb9c-deb4-49e9-8819-621d6ecb8aa8')
    .then((res) => {
    const { userId, peerApiToken } = res;
    const peerService = new peer_service_1.default({ peerApiToken });
    peerService.createPeer();
    peerService.events.on(peerService.EVENTS_NAMES.connected, () => {
        console.log('peer connected');
    });
    peerService.events.on(peerService.EVENTS_NAMES.connecting, () => {
        console.log('peer resetting');
    });
    peerService.events.on(peerService.EVENTS_NAMES.disconnected, () => {
        console.log('peer disconnected');
    });
    peerService.events.on(peerService.EVENTS_NAMES.refresh_token_required, () => {
        console.log('peer refresh_token_required');
    });
});
