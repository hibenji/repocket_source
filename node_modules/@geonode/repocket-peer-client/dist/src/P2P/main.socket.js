"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainSocket = void 0;
const P2P_service_1 = require("../services/P2P.service");
const net_1 = require("net");
const events_1 = __importDefault(require("events"));
const debounce_1 = require("debounce");
const request_handler_socket_1 = require("./request-handler.socket");
class RPSocket extends net_1.Socket {
}
class MainSocket {
    constructor({ port, ip, peerId, token, userId, socketReqHandlerPort }) {
        this.MAX_SOCKET_RETRIES = 10; // try to recconnect for 1min
        this.emitter = new events_1.default();
        this.isReconnecting = false;
        this.onConnectionEstablishedEventFired = false;
        this.peerCloseWithError = false;
        this._ip = ip;
        this._port = port;
        this._socketReqHandlerPort = socketReqHandlerPort;
        this._peerId = peerId;
        this._token = token;
        this._userId = userId;
        this.resetConnectionDebounce = (0, debounce_1.debounce)(async () => {
            if (this.isReconnecting)
                return;
            if (this.mainSocket?.retryConnectionCounter < this.MAX_SOCKET_RETRIES) {
                this.mainSocket.setKeepAlive(true);
                this.mainSocket.setNoDelay(true);
                this.mainSocket.retryConnectionCounter++;
                console.log('MainSocket -> before re connect', this._ip);
                try {
                    this.isReconnecting = true;
                    this.mainSocket.connect(this._port, this._ip, () => {
                        console.log('main socket re connected');
                        this.mainSocket.isBusy = false;
                        this.mainSocket.retryConnectionCounter--;
                        this.isReconnecting = false;
                        this.peerCloseWithError = false;
                    });
                }
                catch (e) {
                    console.log('main socket re connect error', e);
                    this.onMainSocketCloseWIthError();
                    // this.mainSocket.destroy(new Error('End socket - fail to reconnect'));
                }
            }
            else {
                console.log('main socket dont renew connection');
                this.onMainSocketCloseWIthError();
                // this.mainSocket.destroy(
                //   new Error('End socket - dont renew connection - too many sockets')
                // );
                this.emitter.emit(P2P_service_1.P2PEvents.onSocketConnectionClose, null, null);
            }
        }, 500);
    }
    onMainSocketCloseWIthError() {
        this.peerCloseWithError = true;
        this.mainSocket.end();
    }
    end() {
        console.log('main socket destroy');
        this.onMainSocketCloseWIthError();
        // this.mainSocket.destroy(error);
    }
    async connect() {
        try {
            this.mainSocket = new RPSocket();
            this.mainSocket.retryConnectionCounter = 0;
            this.mainSocket.type = 'main';
            this.mainSocket.uid = Math.random();
            this.mainSocket.isBusy = false;
            this.mainSocket.setKeepAlive(true);
            this.mainSocket.setNoDelay(true);
            this.mainSocket.on('data', async (data) => {
                await this.onData(data);
            });
            this.mainSocket.on('error', (error) => {
                console.log('MainSocket -> error', error);
                this.peerCloseWithError = true;
                this.onError(error);
            });
            this.mainSocket.on('close', (hadError) => {
                console.log('MainSocket -> close', hadError);
                this.onClose(hadError);
            });
            this.mainSocket.connect(this._port, this._ip);
            // to test reconnect logic
            // setTimeout(() => {
            //   this.mainSocket.destroy(new Error('End socket - timeout test'));
            // }, 10000);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    async _handleRead(data) {
        const request = String.fromCharCode(...new Uint8Array(data.buffer));
        const reqAsStr = request.toString();
        const isAuthPacket = reqAsStr == P2P_service_1.PeerSocketEvents['Authentication'];
        const isPingPacket = reqAsStr == P2P_service_1.PeerSocketEvents['Ping'];
        const isAuthFailedPacket = reqAsStr == P2P_service_1.PeerSocketEvents['AuthenticationFailed'];
        const isConnCompletedPacket = reqAsStr == P2P_service_1.PeerSocketEvents['ConnectionCompleted'];
        if (isAuthPacket) {
            console.log('P2PS-MainSocket -> Authentication');
            this.mainSocket.write(`authentication ${this._token} ${this._userId} ${this._peerId}`);
            return;
        }
        else if (isConnCompletedPacket) {
            if (this.onConnectionEstablishedEventFired)
                return;
            this.emitter.emit(P2P_service_1.P2PEvents.onConnectionEstablished, null, this._peerId);
            this.onConnectionEstablishedEventFired = true;
            // RPLogger.log('P2PS-MainSocket -> authorization COMPLETED');
            return;
        }
        else if (isPingPacket) {
            console.log('MainSocket -> PING');
            this.mainSocket.write(P2P_service_1.PeerSocketEvents['Pong']);
            return;
        }
        else if (isAuthFailedPacket) {
            console.log('MainSocket -> PING');
            this.onMainSocketCloseWIthError();
            // this.mainSocket.destroy(new Error('End socket - auth failed'));
            return;
        }
        const requests = reqAsStr.split('reqId:');
        console.log('req: '), requests[0];
        if (requests && requests.length) {
            requests.forEach((reqId) => {
                if (reqId === '' || !reqId)
                    return;
                this.initRequestSocketHandler(reqId);
            });
        }
    }
    initRequestSocketHandler(reqId) {
        const reqHandlerSocket = new request_handler_socket_1.RequestHandlerSocket(this._ip, this._socketReqHandlerPort || 7072, reqId, this._peerId);
        reqHandlerSocket.emitter.on(P2P_service_1.P2PEvents.onSocketConnectionFailed, () => this.mainSocket.write(`${P2P_service_1.PeerSocketEvents.SocketHandlerConnectionFailed}:${reqId}`));
        reqHandlerSocket.emitter.on(P2P_service_1.P2PEvents.onTargetWebsiteError, () => this.mainSocket.write(`${P2P_service_1.PeerSocketEvents.TargetWebsiteError}:${reqId}`));
        reqHandlerSocket.connect();
    }
    async onData(data) {
        try {
            await this._handleRead(data);
        }
        catch (e) {
        }
    }
    onError(error) {
        this.peerCloseWithError = true;
        this.emitter.emit(P2P_service_1.P2PEvents.onSocketConnectionFailed, null, error);
    }
    onClose(hadError) {
        console.log('doneHandler', hadError);
        // !hadError
        if (!this.peerCloseWithError) {
            console.log('main socket try to re connect ', this._peerId);
            this.resetConnectionDebounce();
        }
        else {
            console.log('main socket dont renew connection cause of error');
            this.mainSocket.end();
            // this.mainSocket.destroy(
            //   new Error('End socket - dont renew connection - had error')
            // );
            this.emitter.emit(P2P_service_1.P2PEvents.onSocketConnectionClose, null, null);
        }
    }
}
exports.MainSocket = MainSocket;
