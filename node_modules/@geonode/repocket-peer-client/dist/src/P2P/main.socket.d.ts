/// <reference types="node" />
/// <reference types="node" />
import { Socket } from 'net';
import EventEmitter from 'events';
declare class RPSocket extends Socket {
    uid: number;
    retryConnectionCounter: number;
    isBusy: boolean;
    type: 'main' | 'helper' | string;
}
export declare class MainSocket {
    _port: any;
    _socketReqHandlerPort: any;
    _ip: any;
    _peerId: any;
    _token: any;
    _userId: any;
    MAX_SOCKET_RETRIES: number;
    emitter: EventEmitter;
    mainSocket: RPSocket;
    resetConnectionDebounce: any;
    isReconnecting: boolean;
    onConnectionEstablishedEventFired: boolean;
    peerCloseWithError: boolean;
    constructor({ port, ip, peerId, token, userId, socketReqHandlerPort }: {
        port: any;
        ip: any;
        peerId: any;
        token: any;
        userId: any;
        socketReqHandlerPort: any;
    });
    private onMainSocketCloseWIthError;
    end(): void;
    connect(): Promise<boolean>;
    _handleRead(data: any): Promise<void>;
    initRequestSocketHandler(reqId: any): void;
    onData(data: any): Promise<void>;
    onError(error: any): void;
    onClose(hadError: any): void;
}
export {};
