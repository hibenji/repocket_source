"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerMonitor = void 0;
const singleton_1 = require("@ood/singleton");
const store2_1 = __importDefault(require("store2"));
const services_1 = require("../services");
let PeerMonitor = exports.PeerMonitor = class PeerMonitor {
    constructor() {
        this.second = 7;
        this.interval = null;
        this.peerId = null;
        this.userId = null;
        this.configVersionToken = null;
        this.isRunning = false;
        this.isPeerActive = false;
    }
    init({ peerId, userId, configVersionToken }) {
        console.debug('PeerMonitor -> onInit');
        this.peerId = peerId;
        this.userId = userId;
        this.configVersionToken = configVersionToken;
    }
    start({ onPeerDeactivate, onCredentialsMissing, onPeerActive, }, rate) {
        // runs every 5 second
        if (this.interval == null) {
            this.isRunning = true;
            this.interval = setInterval(() => {
                this.monitorHandler(async () => {
                    await onPeerDeactivate();
                }, async () => {
                    await onCredentialsMissing();
                }, async () => {
                    await onPeerActive();
                });
            }, rate);
        }
    }
    stop() {
        if (this.interval != null) {
            this.isRunning = false;
            clearInterval(this.interval?.[Symbol.toPrimitive]());
            this.interval = null;
            console.debug('PeerMonitor -> Monitor Stopped.');
        }
    }
    async monitorHandler(onPeerDeactivate, onCredentialsMissing, onPeerActive) {
        console.debug(`peer monitor is running ${this.userId} / ${this.peerId}`);
        let token = store2_1.default.get('loginToken') ||
            store2_1.default.get('sdk-api-key') ||
            store2_1.default.get('p-api-token');
        if (!token) {
            console.debug('User credentials missing, disconnecting');
            await onCredentialsMissing();
            return;
        }
        try {
            let url = `peer/monitor/${this.userId}/${this.peerId}`;
            if (this.configVersionToken) {
                url += `/${this.configVersionToken}`;
            }
            let response = await services_1.monitorApiService.get(url);
            console.debug(response.data);
            if (response.status === 200 && response.data) {
                const data = response.data.data;
                this.isPeerActive = data['active'] && !data['isConfigurationUpdated'];
                if (!this.isPeerActive) {
                    await onPeerDeactivate();
                    this.stop();
                }
                else {
                    await onPeerActive();
                }
            }
            else {
                await onPeerDeactivate();
                this.stop();
            }
        }
        catch (error) {
            console.error(`Peer monitor error: ${error}`);
        }
    }
};
exports.PeerMonitor = PeerMonitor = __decorate([
    singleton_1.singleton
], PeerMonitor);
