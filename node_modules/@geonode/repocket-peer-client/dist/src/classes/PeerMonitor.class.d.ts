/// <reference types="node" />
interface PeerMonitorConfig {
    peerId: string;
    userId: string;
    configVersionToken: string;
}
interface PeerMonitorCallbacks {
    onPeerDeactivate: Function;
    onCredentialsMissing: Function;
    onPeerActive: Function;
}
export declare class PeerMonitor {
    second: number;
    interval: NodeJS.Timer | null;
    peerId: string | null;
    userId: string | null;
    configVersionToken: string | null;
    isRunning: boolean;
    isPeerActive: boolean;
    onPeerDeactivate: Function | undefined;
    init({ peerId, userId, configVersionToken }: PeerMonitorConfig): void;
    start({ onPeerDeactivate, onCredentialsMissing, onPeerActive, }: PeerMonitorCallbacks, rate: number): void;
    stop(): void;
    monitorHandler(onPeerDeactivate: Function, onCredentialsMissing: Function, onPeerActive: Function): Promise<void>;
}
export {};
