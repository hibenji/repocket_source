"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPNWatcher = void 0;
const os_1 = require("os");
const singleton_1 = require("@ood/singleton");
let VPNWatcher = exports.VPNWatcher = class VPNWatcher {
    constructor() {
        this.second = 10;
        this.isRunning = false;
        this.duration = 10000;
    }
    init({ peerId, userId }) {
        console.log('VPNWatcher -> onInit');
        this.peerId = peerId;
        this.userId = userId;
    }
    start(onVpnActivated) {
        console.log('VPNWatcher -> start');
        if (!this.interval) {
            this.isRunning = true;
            this.interval = setInterval(async () => {
                await this.vpnIntervalHandler(async () => {
                    await onVpnActivated();
                });
            }, this.duration);
        }
    }
    stop() {
        console.log('VPNWatcher -> stop');
        if (this.interval) {
            this.isRunning = false;
            clearInterval(this.interval?.[Symbol.toPrimitive]());
            this.interval = null;
        }
    }
    async vpnIntervalHandler(onVpnActivated) {
        const isVpnConnect = await this.isVpnActive();
        if (isVpnConnect) {
            onVpnActivated();
        }
    }
    // @ts-ignore // todo: complete logic for check if user connect via vpn
    async isVpnActive() {
        let isVpnActive;
        const interfaces = (0, os_1.networkInterfaces)();
        // RPLogger.log('interfaces: ', interfaces);
    }
};
exports.VPNWatcher = VPNWatcher = __decorate([
    singleton_1.singleton
], VPNWatcher);
const vpn = new VPNWatcher();
vpn.isVpnActive().then();
