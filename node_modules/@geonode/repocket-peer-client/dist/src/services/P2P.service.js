"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PService = exports.P2PEvents = exports.PeerSocketEvents = void 0;
// eslint-disable-next-line max-classes-per-file
const events_1 = __importDefault(require("events"));
const net_1 = require("net");
const main_socket_1 = require("../P2P/main.socket");
const net = require('net');
exports.PeerSocketEvents = {
    PeerSocketFree: '1',
    RemoteSocketClosed: '2',
    ConnectionCompleted: '3',
    Authentication: '4',
    TargetWebsiteError: '5',
    Ping: '6',
    Pong: '7',
    SocketHandlerConnectionFailed: '8',
    AuthenticationFailed: '9',
};
class P2PEvents {
}
exports.P2PEvents = P2PEvents;
P2PEvents.onConnectionEstablished = 'onConnectionEstablished';
P2PEvents.onSocketConnectionFailed = 'onSocketConnectionFailed';
P2PEvents.onBeforeStartSocketConnection = 'onBeforeStartSocketConnection';
P2PEvents.onServerCloseSocketConnection = 'onServerCloseSocketConnection';
P2PEvents.onSocketConnectionClose = 'onSocketConnectionClose';
P2PEvents.onConnectionToServerFailed = 'onConnectionToServerFailed';
P2PEvents.onReceiveData = 'onReceiveData';
P2PEvents.onSocketClose = 'onSocketClose';
P2PEvents.onCreateSocketRequestHandler = 'onCreateSocketRequestHandler';
P2PEvents.onTargetWebsiteError = 'onTargetWebsiteError';
class RPSocket extends net_1.Socket {
}
// @singleton
class P2PService {
    // , numOfConnections = 1
    constructor({ ip, port, peerId, userId, token, socketReqHandlerPort }) {
        this.emitter = new events_1.default();
        this._ip = '';
        this._peerId = '';
        this._userId = '';
        this._token = '';
        this._port = 0;
        this._socketReqHandlerPort = 0;
        this.retriesConnectionCounter = 0;
        this.MAX_RETRY_PER_HOUR = 30;
        this._ip = ip;
        this._port = port;
        this._socketReqHandlerPort = socketReqHandlerPort;
        this._peerId = peerId;
        this._userId = userId;
        this._token = token;
        // this._numOfConnections = numOfConnections;
        if (this._retriesInterval == null) {
            this._retriesInterval = setInterval(() => {
                this.retriesConnectionCounter = 0;
            }, 1000 * 60 * 60);
        }
    }
    // @ts-ignore
    async startSocketConnection() {
        console.log('start connection');
        if (this.retriesConnectionCounter >= this.MAX_RETRY_PER_HOUR) {
            this.retriesConnectionCounter = 0;
            console.log('P2PService -> onConnectionToServerFailed');
            this.emitter.emit(P2PEvents.onConnectionToServerFailed, null, null);
            return false;
        }
        this.retriesConnectionCounter++;
        this.emitter.emit(P2PEvents.onBeforeStartSocketConnection);
        // return new Promise((res , rej) => {
        this.mainSocket = new main_socket_1.MainSocket({
            port: this._port,
            socketReqHandlerPort: this._socketReqHandlerPort,
            ip: this._ip,
            peerId: this._peerId,
            token: this._token,
            userId: this._userId,
        });
        this.mainSocket.emitter.on(P2PEvents.onConnectionEstablished, () => this.emitter.emit(P2PEvents.onConnectionEstablished, null, this._peerId));
        this.mainSocket.emitter.on(P2PEvents.onSocketConnectionFailed, (error) => this.emitter.emit(P2PEvents.onSocketConnectionFailed, null, error));
        this.mainSocket.emitter.on(P2PEvents.onSocketConnectionClose, () => this.emitter.emit(P2PEvents.onSocketConnectionClose, null, null));
        const isConnected = await this.mainSocket.connect();
        if (isConnected) {
            this.retriesConnectionCounter = 0;
            return true;
        }
        else {
            setTimeout(async () => {
                await this.startSocketConnection();
            }, 1000 * 10);
        }
        //
    }
    end() {
        console.log('P2PService -> CLOSE SOCKET CONNECTION');
        this.mainSocket.end();
    }
}
exports.P2PService = P2PService;
