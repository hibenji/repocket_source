/// <reference types="node" />
import EventEmitter from 'events';
import { MainSocket } from '../P2P/main.socket';
export declare const PeerSocketEvents: {
    PeerSocketFree: string;
    RemoteSocketClosed: string;
    ConnectionCompleted: string;
    Authentication: string;
    TargetWebsiteError: string;
    Ping: string;
    Pong: string;
    SocketHandlerConnectionFailed: string;
    AuthenticationFailed: string;
};
export declare class P2PEvents {
    static onConnectionEstablished: string;
    static onSocketConnectionFailed: string;
    static onBeforeStartSocketConnection: string;
    static onServerCloseSocketConnection: string;
    static onSocketConnectionClose: string;
    static onConnectionToServerFailed: string;
    static onReceiveData: string;
    static onSocketClose: string;
    static onCreateSocketRequestHandler: string;
    static onTargetWebsiteError: string;
}
export declare class P2PService {
    emitter: EventEmitter;
    _ip: string;
    _peerId: string;
    _userId: string;
    _token: string;
    _port: number;
    _socketReqHandlerPort: number;
    socketServer: any;
    mainSocket: MainSocket;
    retriesConnectionCounter: number;
    MAX_RETRY_PER_HOUR: number;
    _retriesInterval: any;
    constructor({ ip, port, peerId, userId, token, socketReqHandlerPort }: {
        ip: any;
        port: any;
        peerId: any;
        userId: any;
        token: any;
        socketReqHandlerPort: any;
    });
    startSocketConnection(): Promise<boolean | undefined>;
    end(): void;
}
