/// <reference types="node" />
import { P2PService } from './P2P.service';
import { PeerMonitor } from '../classes/PeerMonitor.class';
import { VPNWatcher } from '../classes/VPNWatcher.class';
import { ConnectionMonitor } from '../classes/ConnectionMonitor.class';
import { EventEmitter } from 'node:events';
export interface IPeerPort {
    send(message: string): void;
}
interface RemoteSettings {
    peerMonitorRate: number;
}
declare class PeerService {
    EVENTS_NAMES: {
        connected: string;
        disconnected: string;
        connecting: string;
        refresh_token_required: string;
        peer_server_error: string;
    };
    isUserActivatedThePeer: boolean;
    isPeerActive: boolean;
    isResettingPeer: boolean;
    isCreatingPeer: boolean;
    isConnectivityChanged: boolean;
    shouldResetConnection: boolean;
    connectivityNoneTimer: null;
    vpnStatus: boolean;
    peerId: null;
    P2PServiceInstance: P2PService;
    peerMonitor: PeerMonitor;
    connectionMonitor: ConnectionMonitor;
    vpnWatcher: VPNWatcher;
    cachedPeerActivatedEver: boolean | null;
    enabledLocalMonitor: boolean;
    tcpServerInfo: null;
    connectivitySubscription: null;
    auth: {
        username: string;
        password: string;
    };
    events: EventEmitter;
    localId: number;
    settings: RemoteSettings;
    constructor(options: {
        firebaseLoginToken?: string;
        sdkApiKey?: string;
        peerApiToken?: string;
        userId?: string;
    });
    resetPeerDebounce: any;
    handleConnectionClosedDebounce: any;
    deletePeerDebounce: any;
    _shouldReconnectThePeer(): boolean;
    createPeer(): Promise<boolean>;
    _handleConnectionClosed(): Promise<void>;
    _registerEventListeners(): void;
    _resetPeer(): Promise<void>;
    deletePeer(isForceStop?: boolean): Promise<void>;
    _stop(keepConnectionMonitor?: boolean): Promise<void>;
    _markPeerAsAlive(): Promise<void>;
    startPeerMonitor(): Promise<void>;
    startConnectionMonitor(): Promise<void>;
    startLocalPeerMonitor(): void;
    _verifyUIStatus(): void;
    startVpnWatcher(): Promise<void>;
    getIpInfo(): Promise<any>;
}
export default PeerService;
