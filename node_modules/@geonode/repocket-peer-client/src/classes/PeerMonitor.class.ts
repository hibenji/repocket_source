import { singleton } from '@ood/singleton';
import store from 'store2';
import { monitorApiService } from '../services';


interface PeerMonitorConfig {
  peerId: string;
  userId: string;
  configVersionToken: string;
}

interface PeerMonitorCallbacks {
  onPeerDeactivate: Function;
  onCredentialsMissing: Function;
  onPeerActive: Function;
}

@singleton
export class PeerMonitor {
  second = 7;
  interval: NodeJS.Timer | null = null;
  peerId: string | null = null;
  userId: string | null = null;
  configVersionToken: string | null = null;
  isRunning = false;
  isPeerActive = false;
  onPeerDeactivate: Function | undefined;

  init({ peerId, userId, configVersionToken }: PeerMonitorConfig) {
    console.debug('PeerMonitor -> onInit');
    this.peerId = peerId;
    this.userId = userId;
    this.configVersionToken = configVersionToken;
  }

  start(
    {
      onPeerDeactivate,
      onCredentialsMissing,
      onPeerActive,
    }: PeerMonitorCallbacks,
    rate: number
  ) {
    // runs every 5 second
    if (this.interval == null) {
      this.isRunning = true;
      this.interval = setInterval(() => {
        this.monitorHandler(
          async () => {
            await onPeerDeactivate();
          },
          async () => {
            await onCredentialsMissing();
          },
          async () => {
            await onPeerActive();
          }
        );
      }, rate);
    }
  }

  stop() {
    if (this.interval != null) {
      this.isRunning = false;
      clearInterval(this.interval?.[Symbol.toPrimitive]());
      this.interval = null;
      console.debug('PeerMonitor -> Monitor Stopped.');
    }
  }

  async monitorHandler(
    onPeerDeactivate: Function,
    onCredentialsMissing: Function,
    onPeerActive: Function
  ) {
    console.debug(`peer monitor is running ${this.userId} / ${this.peerId}`);

    let token =
    store.get('loginToken') ||
    store.get('sdk-api-key') ||
    store.get('p-api-token');
    if (!token) {
      console.debug('User credentials missing, disconnecting');
      await onCredentialsMissing();
      return;
    }

    try {
      let url = `peer/monitor/${this.userId}/${this.peerId}`;
      if (this.configVersionToken) {
        url += `/${this.configVersionToken}`;
      }
      let response = await monitorApiService.get(url);

      if (response.status === 200 && response.data) {
        const data = response.data.data;
        this.isPeerActive = data['active'] && !data['isConfigurationUpdated'];
        if (!this.isPeerActive) {
          await onPeerDeactivate();
          this.stop();
        } else {
          await onPeerActive();
        }
      } else {
        await onPeerDeactivate();
        this.stop();
      }
    } catch (error) {
      console.error(`Peer monitor error: ${error}`);
    }
  }
}
