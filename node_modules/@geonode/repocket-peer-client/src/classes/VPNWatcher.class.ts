import { networkInterfaces } from 'os';
import { singleton } from '@ood/singleton';
@singleton
export class VPNWatcher {
  second = 10;
  interval;
  isRunning = false;
  peerId;
  userId;
  duration = 10000;

  init({ peerId, userId }) {
    console.log('VPNWatcher -> onInit');
    this.peerId = peerId;
    this.userId = userId;
  }

  start(onVpnActivated) {
    console.log('VPNWatcher -> start');
    if (!this.interval) {
      this.isRunning = true;
      this.interval = setInterval(async () => {
        await this.vpnIntervalHandler(async () => {
          await onVpnActivated();
        });
      }, this.duration);
    }
  }

  stop() {
    console.log('VPNWatcher -> stop');
    if (this.interval) {
      this.isRunning = false;
      clearInterval(this.interval?.[Symbol.toPrimitive]());
      this.interval = null;
    }
  }

  async vpnIntervalHandler(onVpnActivated) {
    const isVpnConnect = await this.isVpnActive();
    if (isVpnConnect) {
      onVpnActivated();
    }
  }

  // @ts-ignore // todo: complete logic for check if user connect via vpn
  async isVpnActive(): Promise<boolean> {
    let isVpnActive;
    const interfaces = networkInterfaces();

    // RPLogger.log('interfaces: ', interfaces);
  }
}

const vpn = new VPNWatcher();

vpn.isVpnActive().then();
