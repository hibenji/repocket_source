import net from 'net';
import EventEmitter from 'events';
import { P2PEvents } from '../services/P2P.service';

export class TargetSocket {
  emitter = new EventEmitter();
  socket: net.Socket;
  requestHandlerSocket: net.Socket;
  request;
  buffer;

  constructor(requestHandlerSocket: net.Socket, request, buffer) {
    this.requestHandlerSocket = requestHandlerSocket;
    this.request = request;
    this.buffer = buffer;
  }

  connect() {
    // RPLogger.log('handling HTTPS | HTTP');
    if (!this.request) return;

    const port = this.request['port'] != null ? this.request['port'] : 80;

    try {
      this.socket = new net.Socket();
      this.socket.setTimeout(30000); // was 10 before
      this.socket.setNoDelay(true);

      this.socket.on('connect', () => {});
      // this.socket.on('data', (buffer) => this.onSocketDataEvent(buffer));
      this.socket.on('error', async (e) => this.onSocketErrorEvent(e)); //   todo - need to error target website error
      this.socket.on('close', async () => this.onSocketCloseEvent());

      // @ts-ignore
      this.socket.pipe(this.requestHandlerSocket);
      this.socket.connect(port.toString(), this.request['host']);
    } catch (e) {
      console.log('e :', e);
      return;
    }

    if (this.isHttps()) {
      this.requestHandlerSocket.write(
        `${this.request['httpVersion']} 200 Connection Established\r\n\r\n`
      );
    }

    if (!this.isHttps()) {
      try {
        this.socket.write(this.buffer);
      } catch (e) {
        console.log('targetSocket.write error: ${e}');
      }
    }
  }

  private isHttps() {
    return this.request['method'].toLowerCase() == 'connect';
  }

  private onSocketCloseEvent() {
    // console.log('TargetSocket -> onSocketCloseEvent ');
    // this requestHandlerSocket should be close already, but we verify it here
    setTimeout(() => {
      this.requestHandlerSocket?.end();
    }, 3000);
  }
  private onSocketErrorEvent(error) {
    this.emitter.emit(P2PEvents.onTargetWebsiteError, null, error);
  }
  // private onSocketDataEvent(buffer) {
  //   console.log('buffer:', buffer);
  //   // writeToSocket(this.requestHandlerSocket, buffer);
  // }
}
