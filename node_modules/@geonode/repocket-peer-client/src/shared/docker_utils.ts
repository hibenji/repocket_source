import { ApiService } from "../services/api.service";
import { ENV_CONFIG } from "./env";

// export const firebase = new FirebaseService(storage, userApiService, true, deviceService);
const peerManagerApiService = new ApiService(
  '',
  {
    baseUrl: ENV_CONFIG.peerApiUrl,
  },
);

interface ICallResult {
    peerApiToken: string;
    userId?: string;
}

export async function nodeLogIn(
  email: string,
  api_key: string
): Promise<ICallResult> {
  return new Promise((resolve, reject) => {
    peerManagerApiService
      .post('peer/token', { email: email, api_key: api_key })
      .then((result: any) => {
        if (result.status === 200) {
          resolve({ peerApiToken: result.data.token, userId: result.data.user_id});
        } else {
          switch (result.error?.code) {
            case 'auth/user-not-found':
              reject({ error: 'auth/user-not-found' });
              return;
            case 'auth/wrong-password':
              reject({ error: 'auth/wrong-password' });
              return;
            default:
              reject({ error: result.error?.code });
              return;
          }
        }
      })
      .catch((e) => {
        reject({ error: e });
        return;
      });
  });
}
