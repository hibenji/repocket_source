import axios from 'axios';
import { RuntimeInfo } from '../@types/global';
import store from "store2";
import { runtimeInfo } from '../shared/runtime-info';


class HttpService {
  axios;
  auth;
  constructor( ) {
    this.axios = axios.create();
    this.axios.interceptors.request.use((config) =>
      this.httpInterceptingHandler(config)
    );
    // response => response
    this.axios.interceptors.response.use(
      (response) => this.httpResponseHandler(response),
      (error) => this.httpResponseErrorHandler(error)
    );
  }
  // CRUD
  get(url, params) {
    return this.axios.get(url, { params });
  }
  post(url, payload) {
    return this.axios.post(url, payload);
  }
  put(url, payload) {
    return this.axios.put(url, payload);
  }
  delete(url, data) {
    return this.axios.delete(url, { data });
  }

  async accessTokenHandler(config) {
    const accessToken = store.get('loginToken') as string;
    const peerToken = store.get('p-api-token');
    const sdkApiKey = store.get('sdk-api-key');
    //if token is found add it to the header
    if (accessToken || peerToken || sdkApiKey) {
      if (config.method !== 'OPTIONS') {
        if (accessToken && !peerToken) config.headers['auth-token'] = accessToken; // firebase
        if (peerToken) config.headers['p-auth-token'] = peerToken; // apiKey
        if (sdkApiKey) {
          config.headers['api-key'] = sdkApiKey;
          config.headers!['x-sdk-version'] = runtimeInfo.appVersion;
        }
      }
    }
  }

  httpInterceptingHandler = async (config) => {
    this.accessTokenHandler(config);

    config.headers['x-app-verison'] = runtimeInfo.appVersion;

    if (runtimeInfo.isDocker) {
      config.headers['device-os'] = 'node';
    } else if (runtimeInfo.isMac) {
      config.headers['device-os'] = 'mac';
    } else if (runtimeInfo.isWindows) {
      config.headers['device-os'] = 'windows';
    } else if (runtimeInfo.isLinux) {
      config.headers['device-os'] = 'linux';
    }

    // await authService.accessTokenHandler(config);
    // need to add http auth basic
    return config;
  };

  httpResponseHandler = (response) => {
    if (response && response.data) {
      const { data } = response;
      if (data.message && data.showNotification) {
        const { title, body, variant } = data.message;
        // notificationService.openNotification({
        //   title: title,
        //   html: body,
        //   variant: variant || 'success',
        // });
      }
    }
    return response;
  };

  // @ts-ignore
  httpResponseErrorHandler = async (data) => {
    const response = data && data.response;
    if (response) {
      // 401 un auth user
      if (response.status === 401) {
        if (response?.data?.message && response?.data?.showNotification) {

        }
      }

      if (response.data.err && response.data.status !== 402) {
        if (response?.data?.showNotification) {

        }
      }

      if (response.data) {
        // globals.growlRef.show({severity: 'error', summary: 'Error Message', detail: (typeof resp.error === 'string') ? resp.error  : ''});
        return Promise.reject({ data: response.data, status: response.status });
        // Alert.alert('Error', resp.error);
      }
    } else {
      return Promise.reject({});
    }
  };
}


export default HttpService;
